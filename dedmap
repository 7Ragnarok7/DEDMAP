#!/bin/python

#IMPORTING REQUIRED LIBRARIES
import socket
from time import time
from funcy import flatten
from numpy import array
import subprocess
import sys
import getopt

print("\nStarting DEDMAP ( https://7ragnarok7.github.io/DEDMAP ) .....")
#GRAPHICS/TEXT ART
subprocess.call('echo && pyfiglet -c RED dedmap -f Bloody', shell=True)

#DEFINED A HELP FUNCTION TO OUTPUT USAGE INSTRUCTIONS
def help(): print("""
DEDMAP ( https://7ragnarok7.github.io/DEDMAP )

Usage: dedmap [--option(s)] [target(s)]

By default the well-known top 1024 ports will be scanned if no ports are specified.

Options:
-h, --help              show this help message and exit
-v, --verbose           run in verbose mode
-d, --dns               performs a dns lookup
-p, --port<port(s)>     only scan specified port(s)
                        Ex: -p 21; -p 21,22,23;
                        -p user; (scan user ports from 1024 to 49151)
                        -p private; (scan private ports from 49152 to 65535)
                        -p all; (scan all ports from 0 to 65535)
-t, --tcp               perform a tcp scan (default if not specified)
-u, --udp               perform a udp scan
-s, --sweep             perform a sweep scan
-o, --os                perform a os detection
-r, --report<filename>  saves the results in a file

Examples:               dedmap 1.1.1.1
                        dedmap localhost
                        dedmap -d google.com yahoo.com facebook.com localhost
                        dedmap google.com
                        dedmap google.com yahoo.com
                        dedmap 1.1.1.1 2.2.2.2 3.3.3.3
                        dedmap 1.1.1.1-100 google.com
                        dedmap -p 20 1.1.1.1
                        dedmap -p 20,21,22 1.1.1.1
                        dedmap -s 1.1.1.0-255
                        dedmap -st 1.1.1.0-255 (To scan only the hosts which are alive in the network)
                        dedmap -r report.txt 127.0.0.1
""")



#DEFINED A FUNCTION FOR DEBUGGING
def debug():
	print(targets)
	print(options)
	print(TARGET_IP)
	print(TARGET_LEN)
	print(OPTION_LEN)
	
#DESIGNED A FUNTION TO GIVE PRIORITY TO LONG-FORMAT ARGUMENTS
def priority():
	for item in POSSIBLE_OPTIONS:
		if item in options and POSSIBLE_OPTIONS[item] in options: del(options[item])
		elif item in options: options[POSSIBLE_OPTIONS[item]] = options.pop(item)
		
#DESIGNED AN ALGORITHM TO CONVERT IP-RANGE TO A LIST OF IP'S
def convert(seperated, index):
	new_targets = []
	octets = seperated[0].split(".")
	new = [i for i in range(int(octets[3]), int(seperated[1]) + 1)]
	for i in new: new_targets.append(".".join([octets[0], octets[1], octets[2], str(i)]))	 
	targets[index] = new_targets
	
#SCANNER FUNCTION
def scanner(t, p):
	pass

#GETTING HOSTNAMES, IPS AND SCANNING PARAMETERS FORM SHELL ARGUMENTS
try: options, targets = getopt.getopt(sys.argv[1:], 'sdotuhvp:d:', ['sweep', 'dns', 'os', 'tcp', 'udp', 'help', 'verbose', 'port=', 'report='])
except getopt.GetoptError: sys.exit("option -p requires argument")

#CHECKING WHETHER THERE IS AN IP-RANGE OR NOT
try: 
	for item in targets:
		if "-" in item:
			new = item.split("-")
			if "".join(new[0].split(".")).isdigit(): convert(new, targets.index(item))
except IndexError: sys.exit("IP-RANGE only supported in last octet .i.e 1.1.1.1-100")

#VARIABLES
targets = list(flatten(targets)) #CONVERTING NESTED LISTS RETURNED FROM CONVERT() TO NORMAL LISTS
options = dict(options) #CONVERTING THE OPTIONS INTO A DICTIONARY FOR BETTER ADDRESSING
	
#CONSTANTS
STARTING_TIME = time()
POSSIBLE_OPTIONS = {"-s":"--sweep", "-d":"--dns", "-o":"--os", "-t":"--tcp", "-u":"--udp", "-h":"--help", "-v":"--verbose", "-p":"--port", "-r":"--report"}
try: TARGET_IP = list(map(socket.gethostbyname, targets)) #GETTING IPS FROM HOSTNAMES/DOMAIN NAMES
except socket.gaierror: sys.exit("Unable to resolve hostname!")
TARGET_LEN = len(TARGET_IP)
OPTION_LEN = len(options)
#GIVING PRIORITY TO LONG-FORMAT ARGUMENTS
priority()

#DEBUGGING
debug()

################### MAIN ############################

#HELP
if "--help" in options: sys.exit(help())

#CHECKING FOR EMPTY HOSTS
if not targets: sys.exit("No targets specified!\n\nUsage: dedmap [--option(s)] [target(s)]\n\n{}\n\nUse dedmap -h or --help to get a detailed usage instruction.\n".format(array(list(zip(list(POSSIBLE_OPTIONS), list(POSSIBLE_OPTIONS.values()))))))

#DNS LOOKUP
if "--dns" in options: print("Performing a DNS lookup.....\n\n{}\n".format(array(list(zip(targets,TARGET_IP)))))




########## BUGS/COMPABILITY ISSUES ############
#MUST MAINTAIN A SEQUENCE "dedmap <options> <target>"
#SUPPORTS IP-RANGE ONLY IN THE LAST OCTET .i.e 1.1.1.1-200

